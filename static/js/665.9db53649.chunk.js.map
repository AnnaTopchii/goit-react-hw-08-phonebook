{"version":3,"file":"static/js/665.9db53649.chunk.js","mappings":"2RAMMA,EAAgB,CACpBC,KAAM,GACNC,MAAO,GACPC,SAAU,IAGNC,EAASC,EAAAA,KAAaC,MAAM,CAChCL,KAAMI,EAAAA,KAAaE,IAAI,EAAG,cAAcC,IAAI,GAAI,aAAaC,WAC7DN,SAAUE,EAAAA,KAAaE,IAAI,EAAG,cAAcE,WAC5CP,MAAOG,EAAAA,KAAaH,QAAQO,aAGjBC,EAAe,WAC1B,IAAMC,GAAWC,EAAAA,EAAAA,MASjB,OACE,SAACC,EAAA,EAAD,CAAWC,UAAU,eAArB,UACE,SAAC,KAAD,CACEd,cAAeA,EACfe,SAXe,SAACC,EAAUC,GAG9BN,GAASO,EAAAA,EAAAA,KAAS,UAAKF,KACvBC,EAAQE,WACT,EAOKC,iBAAkBhB,EAHpB,UAKE,UAACiB,EAAA,EAAD,CAAMC,GAAIC,EAAAA,GAAV,WACE,UAACF,EAAA,QAAD,CAAYP,UAAU,OAAOU,UAAU,oBAAvC,WACE,SAACH,EAAA,QAAD,wBACA,SAACA,EAAA,UAAD,CACEC,GAAIG,EAAAA,GACJC,KAAK,OACLC,YAAY,mBACZ1B,KAAK,UAEP,SAAC,KAAD,CAAcA,KAAK,OAAO2B,UAAU,YAGtC,UAACP,EAAA,QAAD,CAAYP,UAAU,OAAOU,UAAU,iBAAvC,WACE,SAACH,EAAA,QAAD,6BACA,SAACA,EAAA,UAAD,CACEC,GAAIG,EAAAA,GACJC,KAAK,QACLC,YAAY,oBACZ1B,KAAK,WAEP,SAAC,KAAD,CAAcA,KAAK,QAAQ2B,UAAU,YAGvC,UAACP,EAAA,QAAD,CAAYP,UAAU,OAAOU,UAAU,oBAAvC,WACE,SAACH,EAAA,QAAD,wBACA,SAACA,EAAA,UAAD,CACEC,GAAIG,EAAAA,GACJC,KAAK,WACLC,YAAY,8BACZ1B,KAAK,cAEP,SAAC,KAAD,CAAcA,KAAK,WAAW2B,UAAU,YAG1C,SAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUJ,KAAK,SAA/B,4BAuBT,E,UCvFc,SAASK,IACtB,IAAMC,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,IACxBC,GAAQF,EAAAA,EAAAA,IAAYG,EAAAA,GAE1B,OACE,4BACE,SAAC,KAAD,WACE,+CAEF,SAAC1B,EAAD,IACCsB,IAAcG,IAAS,wCAG7B,C","sources":["components/RegisterForm/RegisterForm.jsx","pages/Register.js"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/operations';\nimport { Button, Container, Form } from 'react-bootstrap';\nimport { Formik, Form as FormikForm, ErrorMessage, Field } from 'formik';\nimport * as Yup from 'yup';\n\nconst initialValues = {\n  name: '',\n  email: '',\n  password: '',\n};\n\nconst Schema = Yup.object().shape({\n  name: Yup.string().min(6, 'Too Short!').max(20, 'Too Long!').required(),\n  password: Yup.string().min(7, 'Too Short!').required(),\n  email: Yup.string().email().required(),\n});\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = (formData, actions) => {\n    // e.preventDefault();\n    // const form = e.currentTarget;\n    dispatch(register({ ...formData }));\n    actions.resetForm();\n  };\n\n  return (\n    <Container className=\"mx-auto w-75\">\n      <Formik\n        initialValues={initialValues}\n        onSubmit={handleSubmit}\n        validationSchema={Schema}\n      >\n        <Form as={FormikForm}>\n          <Form.Group className=\"mb-3\" controlId=\"formBasicUsername\">\n            <Form.Label>Username</Form.Label>\n            <Form.Control\n              as={Field}\n              type=\"text\"\n              placeholder=\"Taras Shevchenko\"\n              name=\"name\"\n            />\n            <ErrorMessage name=\"name\" component=\"div\" />\n          </Form.Group>\n\n          <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n            <Form.Label>Email address</Form.Label>\n            <Form.Control\n              as={Field}\n              type=\"email\"\n              placeholder=\"myemail@gmail.com\"\n              name=\"email\"\n            />\n            <ErrorMessage name=\"email\" component=\"div\" />\n          </Form.Group>\n\n          <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\n            <Form.Label>Password</Form.Label>\n            <Form.Control\n              as={Field}\n              type=\"password\"\n              placeholder=\"Password (min 7 characters)\"\n              name=\"password\"\n            />\n            <ErrorMessage name=\"password\" component=\"div\" />\n          </Form.Group>\n\n          <Button variant=\"primary\" type=\"submit\">\n            Register\n          </Button>\n        </Form>\n      </Formik>\n    </Container>\n\n    // <form onSubmit={handleSubmit} autoComplete=\"off\">\n    //   <label>\n    //     Username\n    //     <input type=\"text\" name=\"name\" />\n    //   </label>\n    //   <label>\n    //     Email\n    //     <input type=\"email\" name=\"email\" />\n    //   </label>\n    //   <label>\n    //     Password\n    //     <input type=\"password\" name=\"password\" />\n    //   </label>\n    //   <Button type=\"submit\">Register</Button>\n    // </form>\n  );\n};\n","import { Helmet } from 'react-helmet-async';\nimport { useSelector } from 'react-redux';\nimport { RegisterForm } from 'components/RegisterForm/RegisterForm';\nimport { selectErrorUser, selectIsLoadingUser } from 'redux/auth/selectors';\n\nexport default function Register() {\n  const isLoading = useSelector(selectIsLoadingUser);\n  const error = useSelector(selectErrorUser);\n\n  return (\n    <div>\n      <Helmet>\n        <title>Registration</title>\n      </Helmet>\n      <RegisterForm />\n      {isLoading && !error && <b>Loading...</b>}\n    </div>\n  );\n}\n"],"names":["initialValues","name","email","password","Schema","Yup","shape","min","max","required","RegisterForm","dispatch","useDispatch","Container","className","onSubmit","formData","actions","register","resetForm","validationSchema","Form","as","FormikForm","controlId","Field","type","placeholder","component","Button","variant","Register","isLoading","useSelector","selectIsLoadingUser","error","selectErrorUser"],"sourceRoot":""}