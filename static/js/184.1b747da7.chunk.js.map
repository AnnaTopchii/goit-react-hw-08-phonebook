{"version":3,"file":"static/js/184.1b747da7.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.js","redux/filter/selectors.js","redux/selectors.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/App.styled.js","pages/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Form as FormikForm, ErrorMessage as FormikError } from 'formik';\n\nexport const Form = styled(FormikForm)`\n  padding: 20px 10px;\n  border: 2px solid #99004f;\n  border-radius: 4px;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  margin-bottom: 20px;\n`;\n\nexport const FormField = styled.label`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const ErrorMessage = styled(FormikError)`\n  color: tomato;\n`;\n\nexport const Button = styled.button`\n  width: 200px;\n  font-weight: 700;\n  align-self: center;\n  background-color: #ffcce6;\n  cursor: pointer;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n  border-radius: 4px;\n  border: 1px solid #ffcce6;\n  padding: 5px 20px;\n  text-transform: uppercase;\n\n  transition: background-color 250ms linear, border 250ms linear;\n\n  &:hover,\n  &:focus {\n    background-color: #ffb3da;\n    border: 1px solid #99004f;\n  }\n`;\n","export const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { Formik, Field } from 'formik';\nimport { Form, FormField, ErrorMessage, Button } from './ContactForm.styled';\nimport * as Yup from 'yup';\n\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nconst nameRegex =\n  /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/gm;\n\nconst numberRegex =\n  /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/gm;\n\nconst Schema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Too Short!')\n    .max(20, 'Too Long!')\n    .matches(\n      nameRegex,\n      'Name may contain only letters, apostrophe, dash and spaces'\n    )\n    .required(),\n  number: Yup.string()\n    .min(6, 'Too Short!')\n    .max(15, 'Too Long!')\n    .matches(\n      numberRegex,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required(),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = (formData, actions) => {\n    const sameName = contacts.find(\n      el => el.name.toLowerCase() === formData.name.toLowerCase()\n    );\n\n    if (sameName) return alert(formData.name + ' is already in contacts.');\n\n    dispatch(addContact({ ...formData }));\n    actions.resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      validationSchema={Schema}\n    >\n      <Form>\n        <FormField>\n          Name\n          <Field type=\"text\" name=\"name\" />\n          <ErrorMessage name=\"name\" component=\"div\" />\n        </FormField>\n        <FormField>\n          Phone\n          <Field type=\"tel\" name=\"number\" />\n        </FormField>\n        <ErrorMessage name=\"number\" component=\"div\" />\n        <Button type=\"submit\">Add contact</Button>\n      </Form>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ol`\n  padding: 20px 10px;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n`;\n\nexport const ListItem = styled.li`\n  display: flex;\n`;\n\nexport const Text = styled.span``;\n\nexport const Button = styled.button`\n  background-color: #ffcce6;\n  cursor: pointer;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n  border-radius: 4px;\n  border: 1px solid #ffcce6;\n  padding: 5px 20px;\n  text-transform: uppercase;\n  margin-left: auto;\n\n  transition: background-color 250ms linear, border 250ms linear;\n\n  &:hover,\n  &:focus {\n    background-color: #ffb3da;\n    border: 1px solid #99004f;\n  }\n`;\n","export const selectFilter = state => state.filter.value;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { selectContacts } from './contacts/selectors';\nimport { selectFilter } from './filter/selectors';\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter)\n    );\n  }\n);\n","import { useDispatch, useSelector } from 'react-redux';\nimport { List, ListItem, Text, Button } from './ContactList.styled';\n\nimport { deleteContact } from 'redux/contacts/operations';\nimport { selectVisibleContacts } from 'redux/selectors';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  return (\n    <List>\n      {visibleContacts.map(({ id, name, phone }) => (\n        <ListItem key={id}>\n          <Text>\n            {name}: {phone}\n          </Text>\n          <Button type=\"button\" onClick={() => dispatch(deleteContact(id))}>\n            Delete\n          </Button>\n        </ListItem>\n      ))}\n      {visibleContacts.length === 0 && (\n        <p>Sorry, You have no contacts with such name</p>\n      )}\n    </List>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Field = styled.label`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 20px;\n  font-weight: 700;\n  font-style: italic;\n`;\n\nexport const Input = styled.input`\n  width: 200px;\n`;\n","import { Field, Input } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from '../../redux/filter/filterSlice';\nimport { selectFilter } from 'redux/filter/selectors';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filterValue = useSelector(selectFilter);\n\n  const onChange = e => {\n    const value = e.target.value.toLowerCase();\n    dispatch(setFilter(value));\n  };\n\n  return (\n    <Field>\n      Find contacts by name\n      <Input type=\"text\" onChange={onChange} value={filterValue} />\n    </Field>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  padding: 20px 0px;\n  margin: 0px auto;\n  width: 400px;\n`;\n\nexport const Title = styled.h1`\n  font-weight: 700;\n  font-size: 28px;\n  text-align: center;\n  text-transform: uppercase;\n  margin-bottom: 20px;\n  color: #99004f;\n`;\n\nexport const SubTitle = styled.h2`\n  font-weight: 700;\n  font-size: 28px;\n  text-align: center;\n  text-transform: uppercase;\n  margin-bottom: 20px;\n  color: #99004f;\n`;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport {\n  selectContacts,\n  selectError,\n  selectIsLoading,\n} from 'redux/contacts/selectors';\nimport { Container, Title, SubTitle } from 'components/App.styled';\n\nexport default function Tasks() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const contacts = useSelector(selectContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <Container>\n        <Title>Phone book</Title>\n        <ContactForm />\n\n        <SubTitle>Contacts</SubTitle>\n        {isLoading && !error && <b>Request in progress...</b>}\n        {contacts.length > 0 ? (\n          <>\n            <Filter />\n            <ContactList />\n          </>\n        ) : (\n          'You have no contacts'\n        )}\n      </Container>\n    </>\n  );\n}\n"],"names":["Form","styled","FormikForm","FormField","ErrorMessage","FormikError","Button","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","initialValues","name","number","Schema","Yup","shape","min","max","matches","required","ContactForm","dispatch","useDispatch","useSelector","onSubmit","formData","actions","find","el","toLowerCase","alert","addContact","resetForm","validationSchema","type","component","List","ListItem","Text","selectFilter","filter","value","selectVisibleContacts","createSelector","contact","includes","ContactList","visibleContacts","map","id","phone","onClick","deleteContact","length","Field","Input","Filter","filterValue","onChange","e","target","setFilter","Container","Title","SubTitle","Tasks","useEffect","fetchContacts","Helmet"],"sourceRoot":""}