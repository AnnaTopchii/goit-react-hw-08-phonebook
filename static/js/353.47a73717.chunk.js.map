{"version":3,"file":"static/js/353.47a73717.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","redux/filter/selectors.js","redux/selectors.js","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/Contacts.js"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { Formik, Form as FormikForm, ErrorMessage, Field } from 'formik';\n// import { Form, FormField, ErrorMessage, Button } from './ContactForm.styled';\nimport { Button, Form } from 'react-bootstrap';\nimport * as Yup from 'yup';\n\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nconst nameRegex =\n  /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/gm;\n\nconst numberRegex =\n  /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/gm;\n\nconst Schema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Too Short!')\n    .max(20, 'Too Long!')\n    .matches(\n      nameRegex,\n      'Name may contain only letters, apostrophe, dash and spaces'\n    )\n    .required(),\n  number: Yup.string()\n    .min(6, 'Too Short!')\n    .max(15, 'Too Long!')\n    .matches(\n      numberRegex,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required(),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = (formData, actions) => {\n    const sameName = contacts.find(\n      el => el.name.toLowerCase() === formData.name.toLowerCase()\n    );\n\n    if (sameName) return alert(formData.name + ' is already in contacts.');\n\n    dispatch(addContact({ ...formData }));\n    actions.resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      validationSchema={Schema}\n    >\n      <Form as={FormikForm}>\n        <Form.Group className=\"mb-3\" controlId=\"formContactName\">\n          <Form.Label>\n            Name\n            <Form.Control as={Field} type=\"text\" name=\"name\" />\n            <ErrorMessage name=\"name\" component=\"div\" />\n          </Form.Label>\n        </Form.Group>\n        <Form.Group className=\"mb-3\" controlId=\"formContactPhone\">\n          <Form.Label>\n            Phone\n            <Form.Control type=\"tel\" name=\"number\" />\n          </Form.Label>\n          <ErrorMessage name=\"number\" component=\"div\" />\n        </Form.Group>\n        <Button type=\"submit\">Add contact</Button>\n      </Form>\n    </Formik>\n  );\n};\n","export const selectFilter = state => state.filter.value;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { selectContacts } from './contacts/selectors';\nimport { selectFilter } from './filter/selectors';\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter)\n    );\n  }\n);\n","import { useDispatch, useSelector } from 'react-redux';\n// import { List, ListItem, Text, Button} from './ContactList.styled';\n\nimport { deleteContact } from 'redux/contacts/operations';\nimport { selectVisibleContacts } from 'redux/selectors';\nimport { ListGroup, Button } from 'react-bootstrap';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  return (\n    <ListGroup as=\"ol\" numbered>\n      {visibleContacts.map(({ id, name, phone }) => (\n        <ListGroup.Item\n          as=\"li\"\n          key={id}\n          className=\"d-flex justify-content-between\"\n        >\n          <span>\n            {name}: {phone}\n          </span>\n          <Button type=\"button\" onClick={() => dispatch(deleteContact(id))}>\n            Delete\n          </Button>\n        </ListGroup.Item>\n      ))}\n      {visibleContacts.length === 0 && (\n        <p>Sorry, You have no contacts with such name</p>\n      )}\n    </ListGroup>\n\n    // <List>\n    //   {visibleContacts.map(({ id, name, phone }) => (\n    //     <ListItem key={id}>\n    //       <Text>\n    //         {name}: {phone}\n    //       </Text>\n    //       <Button type=\"button\" onClick={() => dispatch(deleteContact(id))}>\n    //         Delete\n    //       </Button>\n    //     </ListItem>\n    //   ))}\n    //   {visibleContacts.length === 0 && (\n    //     <p>Sorry, You have no contacts with such name</p>\n    //   )}\n    // </List>\n  );\n};\n","// import { Field, Input } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from '../../redux/filter/filterSlice';\nimport { selectFilter } from 'redux/filter/selectors';\nimport { Form } from 'react-bootstrap';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filterValue = useSelector(selectFilter);\n\n  const onChange = e => {\n    const value = e.target.value.toLowerCase();\n    dispatch(setFilter(value));\n  };\n\n  return (\n    // <Field>\n    //   Find contacts by name\n    //   <Input type=\"text\" onChange={onChange} value={filterValue} />\n    // </Field>\n\n    <Form.Group className=\"mb-3\" controlId=\"findContacts\">\n      <Form.Label> Find contacts by name</Form.Label>\n      <Form.Control\n        type=\"text\"\n        onChange={onChange}\n        placeholder=\"Taras Shevchenko\"\n        value={filterValue}\n      />\n    </Form.Group>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet-async';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport {\n  selectContacts,\n  selectError,\n  selectIsLoading,\n} from 'redux/contacts/selectors';\n// import { Container, Title, SubTitle } from 'components/App.styled';\nimport { Container } from 'react-bootstrap';\n\nexport default function Tasks() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const contacts = useSelector(selectContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <Container>\n        <h1>Phone book</h1>\n        <ContactForm />\n\n        <h2>Contacts</h2>\n        {isLoading && !error && <b>Request in progress...</b>}\n        {contacts.length > 0 ? (\n          <>\n            <Filter />\n            <ContactList />\n          </>\n        ) : (\n          'You have no contacts'\n        )}\n      </Container>\n    </>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","initialValues","name","number","Schema","Yup","shape","min","max","matches","required","ContactForm","dispatch","useDispatch","useSelector","onSubmit","formData","actions","find","el","toLowerCase","alert","addContact","resetForm","validationSchema","Form","as","FormikForm","className","controlId","Field","type","component","Button","selectFilter","filter","value","selectVisibleContacts","createSelector","contact","includes","ContactList","visibleContacts","ListGroup","numbered","map","id","phone","onClick","deleteContact","length","Filter","filterValue","onChange","e","target","setFilter","placeholder","Tasks","useEffect","fetchContacts","Container"],"sourceRoot":""}